#!/bin/bash

BREAKDIR='./breaks'
COMPLETED_LABS=${BREAKDIR}/completed_labs
BREAKTASKFILE=
VIRTUAL_MACHINE_IP="127.0.0.1 -p 2222"
ARR_INDEX=0

get_ip_from_provider ()
{ 
  VIRTUAL_MACHINE_IP=$(basename .vagrant/machines/BF1/libvirt/logs/ssh-forwarding*.log  | awk -F- '{ print $4}' | cut -d_ -f1)
}

throw_informative_message ()
{ 
  [ -e ".vagrant/machines/BF1/libvirt" ] && get_ip_from_provider
  echo
  echo 'Breakfix operation complete!'
  echo
  echo "To access the BF1 VM: ssh root@${VIRTUAL_MACHINE_IP}"
  echo '(password: rpcr).'
  echo
  echo 'Your task is decribed on file /root/breakfix.txt'
  echo 'Hint files are in /root/hint*.txt'
  echo 'Answer to the exercise: /root/solution.txt '
  echo
  echo 'Good luck!'
  echo
}

clean_before_start ()
{ 
  [ -e sandbox_status ] && rm sandbox_status
  [ -e playbook.retry ] && rm playbook.retry
}


choose_random_break_task_file ()
{
  ARR_INDEX=0
  for AVAILABLE_BREAK in $(ls ${BREAKDIR}/*yml)
  do  
    BREAKFIXES[${ARR_INDEX}]=${AVAILABLE_BREAK}
    : $((ARR_INDEX++))
  done
  FILE_TO_CHOOSE=$((${RANDOM}%${ARR_INDEX}))
  BREAKTASKFILE=${BREAKFIXES[${FILE_TO_CHOOSE}]}
}

update_completed_labs ()
{
  echo "${BREAKTASKFILE}" >> ${COMPLETED_LABS}
}


first_time_vm ()
{
  echo "remove vag dir"
  rm -rf .vagrant
  echo "running vagrant up"
  vagrant up
  status=${?}
  echo $status
  if [ "${status}" != "0" ] && [ -e playbook.retry ]
  then
    # try to re deploy the base playbook until successful
    until [ "${status}" == "0" ]
    do
      echo
      echo 'BASE ANSIBLE PLAYBOOK DEPLOYMENT FAILED!!!'
      echo 'You should not worry!'
      echo 'I will try to redeploy it until successful'
      echo
      ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory \
        --limit @playbook.retry playbook.yml
      status=${?}
    done
  elif [ "${status}" != "0" ]
  then
    echo
    echo Something unexpected happened.
    echo Please delete the virtual machine with ./breakfix-cleanup
    echo and rerun ${0}
    echo
    # Something else failed, fail abruptly
    exit ${status}
  fi  
  [ "${status}" == "0" ] && vagrant sandbox on
  [ "${?}" == "0" ] && vagrant sandbox commit
  return ${?}
}

rollback_vm ()
{
  vagrant sandbox rollback
  return ${?}
}

setup_exercise ()
{
  # If no breakfix was specified, select one at random
  if [[ -e "$1" ]] ; then
    BREAKTASKFILE="$1"
  else
    # Choose random file
    COMPLETED_BEFORE=1
    NO_MORE_LABS=0
    RANDOM_TRIES=0
    until [ "${COMPLETED_BEFORE}" == "0" ] || [ "${NO_MORE_LABS}" == "1" ]
    do
      choose_random_break_task_file
      if [ -e ${COMPLETED_LABS} ]
      then
        ! grep ${BREAKTASKFILE} ${COMPLETED_LABS} > /dev/null && \
        COMPLETED_BEFORE=0
      else
        COMPLETED_BEFORE=0
      fi
      : $((RANDOM_TRIES++))
      [ "${RANDOM_TRIES}" -gt "${ARR_INDEX}" ] && echo "You have completed all the exercises. Delete or edit ${COMPLETED_LABS} to try again" && NO_MORE_LABS=1 && return 0
    done
  fi
  echo Lab selected: ${BREAKTASKFILE}
  ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory ${BREAKTASKFILE}
  status=${?}
  [ "${status}" == "0" ] && throw_informative_message
  return ${status}
}

# main section

# Make sure no trash files are scattered around
#clean_before_start

export BREAKTASKFILE

# test if vm snapshot exsist or not
vagrant sandbox status > sandbox_status 2>&1
grep "not" sandbox_status
echo "grep status $?"

#if grep of standbox is true, status is 0 (first_time_vm) else status is 1 (rollback)
if [ $? -eq 0 ]
then
  echo "first_time_vm"
  first_time_vm
  status=${?}
elif [ $? -eq 1]
  then
   echo "rollback_vm"
   rollback_vm
   status=${?}
fi
[ "${status}" == "0" ] && setup_exercise ${1}
[ "${?}" == "0" ] && update_completed_labs
