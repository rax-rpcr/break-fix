# -*- mode: ruby -*-

# vi: set ft=ruby :

Vagrant.require_version ">= 1.5.0"

#####################
#
# Vagrant Box Parameters Begin
#
#####################

boxes = [
    {
        :name => "proxy1",
        :eth1 => "192.168.236.60",
        :eth2 => "192.168.252.60",
        :mem => "512",
        :cpu => "1",
        :nodetype => "proxy"
    },
    {
        :name => "object1",
        :eth1 => "192.168.236.70",
        :eth2 => "192.168.252.70",
        :mem => "512",
        :cpu => "1",
        :nodetype => "object"
    },
    {
        :name => "object2",
        :eth1 => "192.168.236.71",
        :eth2 => "192.168.252.71",
        :mem => "512",
        :cpu => "1",
        :nodetype => "object"
    },
    {
        :name => "object3",
        :eth1 => "192.168.236.72",
        :eth2 => "192.168.252.72",
        :mem => "512",
        :cpu => "1",
        :nodetype => "object"
    }
]

#####################
#
# Vagrant Box Parameters End
#
#####################

#####################
#
# Common Script Begin
#
#####################

$commonscript = <<COMMONSCRIPT
# Set verbose
set -v

# Set exit on error
set -e

# Silly Ubuntu 12.04 doesn't have the
# --stdin option in the passwd utility
echo root:vagrant | chpasswd

cat << EOF >> /etc/hosts
192.168.236.60 proxy1
192.168.236.70 object1
192.168.236.71 object2
192.168.236.72 object3
EOF

# Environment variables used in scripts
ETH1_IP=`ip route get 192.168.236.0/24 | awk 'NR==1 {print $NF}'`
echo export ETH1_IP=$ETH1_IP > /etc/profile.d/eth1-ip.sh
ETH2_IP=`ip route get 192.168.252.0/24 | awk 'NR==1 {print $NF}'`
echo export ETH2_IP=$ETH2_IP > /etc/profile.d/eth2-ip.sh
COMMONSCRIPT

#####################
#
# Common Script End
#
#####################

#####################
#
# Proxy Script Begin
#
#####################

$proxyscript = <<PROXYSCRIPT
# Set verbose
set -v

# Set exit on error
set -e

yum install -y https://repos.fedorapeople.org/repos/openstack/EOL/openstack-icehouse/rdo-release-icehouse-4.noarch.rpm

sed -i 's$openstack/openstack$openstack/EOL/openstack$g' /etc/yum.repos.d/rdo-release.repo

yum install -y http://dl.fedoraproject.org/pub/epel/6Server/x86_64/epel-release-6-8.noarch.rpm

yum install -y openstack-swift-proxy python-swiftclient memcached

sed -i 's/^\(OPTIONS=\).*/\1"-l 192.168.252.60"/' /etc/sysconfig/memcached

chkconfig memcached on
service memcached start

cat << EOF > /etc/swift/proxy-server.conf
[DEFAULT]
bind_ip = $ETH1_IP
bind_port = 8080
workers = 8
user = swift

[pipeline:main]
pipeline = healthcheck cache tempauth proxy-server

[app:proxy-server]
use = egg:swift#proxy
allow_account_management = true
account_autocreate = true

[filter:cache]
use = egg:swift#memcache
memcache_servers = $ETH2_IP:11211

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:tempauth]
use = egg:swift#tempauth
# user_<tenant>_<username> = <password> <privileges>
user_admin_admin = admin .admin .reseller_admin
user_test_tester = testing .admin
user_test2_tester2 = testing2 .admin
user_test_tester3 = testing3
EOF

cat << EOF > /etc/swift/swift.conf
[swift-hash]
# random unique strings that can never change (DO NOT LOSE)
swift_hash_path_prefix = `od -t x8 -N 8 -A n </dev/random`
swift_hash_path_suffix = `od -t x8 -N 8 -A n </dev/random`
EOF

cd /etc/swift

swift-ring-builder account.builder create 18 3 1
swift-ring-builder container.builder create 18 3 1
swift-ring-builder object.builder create 18 3 1

swift-ring-builder account.builder add z1-192.168.252.70:6002/loop2 10
swift-ring-builder container.builder add z1-192.168.252.70:6001/loop2 10
swift-ring-builder object.builder add z1-192.168.252.70:6000/loop2 10

swift-ring-builder account.builder add z2-192.168.252.71:6002/loop2 10
swift-ring-builder container.builder add z2-192.168.252.71:6001/loop2 10
swift-ring-builder object.builder add z2-192.168.252.71:6000/loop2 10

swift-ring-builder account.builder add z3-192.168.252.72:6002/loop2 10
swift-ring-builder container.builder add z3-192.168.252.72:6001/loop2 10
swift-ring-builder object.builder add z3-192.168.252.72:6000/loop2 10

swift-ring-builder account.builder rebalance
swift-ring-builder container.builder rebalance
swift-ring-builder object.builder rebalance

chown -R swift:swift /etc/swift

chkconfig openstack-swift-proxy on

service openstack-swift-proxy start
PROXYSCRIPT

#####################
#
# Proxy Script End
#
#####################

#####################
#
# Object Script Begin
#
#####################

$objectscript = <<OBJECTSCRIPT
# Set verbose
set -v

# Set exit on error
set -e

yum install -y https://repos.fedorapeople.org/repos/openstack/EOL/openstack-icehouse/rdo-release-icehouse-4.noarch.rpm

sed -i 's$openstack/openstack$openstack/EOL/openstack$g' /etc/yum.repos.d/rdo-release.repo

yum install -y http://dl.fedoraproject.org/pub/epel/6Server/x86_64/epel-release-6-8.noarch.rpm

yum install -y openstack-swift-account openstack-swift-container openstack-swift-object xfsprogs xinetd

cat << EOF > /etc/xinetd.d/rsync
# default: off
# description: The rsync server is a good addition to an ftp server, as it \
#   allows crc checksumming etc.
service rsync
{
    disable         = no
    flags           = IPv6
    socket_type     = stream
    wait            = no
    user            = root
    server          = /usr/bin/rsync
    server_args     = --daemon
    log_on_failure  += USERID
}
EOF

cat << EOF > /etc/rsyncd.conf
uid = swift
gid = swift
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid
address = $ETH2_IP

[account]
max connections = 2
path = /srv/node/
read only = false
lock file = /var/lock/account.lock

[container]
max connections = 2
path = /srv/node/
read only = false
lock file = /var/lock/container.lock

[object]
max connections = 2
path = /srv/node/
read only = false
lock file = /var/lock/object.lock
EOF

chkconfig xinetd on
service xinetd start

mkdir -p /var/swift/recon

chown -R swift:swift /var/swift/recon

cat << EOF > /etc/swift/account-server.conf
[DEFAULT]
bind_ip = $ETH2_IP
bind_port = 6002
workers = 2

[pipeline:main]
pipeline = recon account-server

[app:account-server]
use = egg:swift#account

[account-replicator]

[account-auditor]

[account-reaper]

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
account_recon = true
EOF

cat << EOF > /etc/swift/container-server.conf
[DEFAULT]
bind_ip = $ETH2_IP
bind_port = 6001
workers = 2

[pipeline:main]
pipeline = recon container-server

[app:container-server]
use = egg:swift#container

[container-replicator]

[container-updater]

[container-auditor]

[container-sync]

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
container_recon = true
EOF

cat << EOF > /etc/swift/object-server.conf
[DEFAULT]
bind_ip = $ETH2_IP
bind_port = 6000
workers = 3

[pipeline:main]
pipeline = recon object-server

[app:object-server]
use = egg:swift#object

[object-replicator]

[object-updater]

[object-auditor]

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
object_recon = true
EOF

ssh-keygen -t rsa -N "" -f /root/.ssh/id_rsa

ssh-keyscan proxy1 >> /root/.ssh/known_hosts
ssh-keyscan 192.168.236.60 >> /root/.ssh/known_hosts

yum install -y expect

expect<<EOF
spawn ssh-copy-id proxy1
expect "root@proxy1's password:"
send "vagrant\n"
expect eof
EOF

scp proxy1:/etc/swift/*.ring.gz /etc/swift/

scp proxy1:/etc/swift/swift.conf /etc/swift/

chown -R swift:swift /etc/swift

mkdir -p /srv/node/loop2

dd if=/dev/zero of=/mnt/object-volume1 bs=1 count=0 seek=10G
losetup /dev/loop2 /mnt/object-volume1

mkfs.xfs -i size=1024 /dev/loop2
echo "/dev/loop2 /srv/node/loop2 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mount -a

chown swift:swift /srv/node/loop2

for service in openstack-swift-object openstack-swift-object-replicator openstack-swift-object-updater openstack-swift-object-auditor openstack-swift-container openstack-swift-container-replicator openstack-swift-container-updater openstack-swift-container-auditor openstack-swift-account openstack-swift-account-replicator openstack-swift-account-reaper openstack-swift-account-auditor; do service $service start; chkconfig $service on; done

cat << EOF > /etc/rc.local
losetup /dev/loop2 /mnt/object-volume1
mount -a
swift-init all restart
exit
EOF
OBJECTSCRIPT

#####################
#
# Object Script End
#
#####################

#####################
#
# Virtual Machine Definition Begin
#
#####################

Vagrant.configure(2) do |config|

  config.vm.box = "centos-6.5-x86_64"
  config.vm.box_url = "http://public.thornelabs.net/centos-6.5-x86_64.box"

  config.vm.provider "vmware_fusion" do |v, override|
    override.vm.box = "centos-6.5-x86_64"
    override.vm.box_url = "http://public.thornelabs.net/centos-6.5-x86_64.vmware.box"
  end

  # Turn off shared folders
  config.vm.synced_folder ".", "/vagrant", id: "vagrant-root", disabled: true

  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.hostname = opts[:name]

      config.vm.provision :shell, inline: $commonscript

      config.vm.network :private_network, ip: opts[:eth1]
      config.vm.network :private_network, ip: opts[:eth2]

      config.vm.provider "vmware_fusion" do |v|
        v.vmx["memsize"] = opts[:mem]
        v.vmx["numvcpus"] = opts[:cpu]
      end

      config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--memory", opts[:mem]]
        v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
      end

      if opts[:nodetype] == "proxy"
          config.vm.provision :shell, inline: $proxyscript
      end

      if opts[:nodetype] == "object"
          config.vm.provision :shell, inline: $objectscript
      end
    end
  end
end

#####################
#
# Virtual Machine Definition End
#
#####################
